@using BlazorDragAndDrop.Data.Models
<div class="job-status">
    <h5>@ListStatus (@Jobs.Count())</h5>
    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">
        <li>
            @foreach (var job in Jobs)
            {
                <Job JobModel="job" />
            }
        </li>        
    </ul>
</div>
@code {
    [CascadingParameter] JobContainer Container { get; set; }  
   
    [Parameter] public JobStatuses ListStatus { get; set; }

    [Parameter] public JobStatuses[] AllowedStatuses { get; set; }

    List < JobModel > Jobs = new List < JobModel > ();
    string dropClass = "";
    protected override void OnParametersSet() {
        Jobs.Clear();
        Jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }
    private void HandleDragEnter() {
        if (ListStatus == Container.Payload.Status) return;
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) {
            dropClass = "no-drop";
        } else {
            dropClass = "can-drop";
        }
    }
    private void HandleDragLeave() {
        dropClass = "";
    }
    private async Task HandleDrop() {
        dropClass = "";
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;
        await Container.UpdateJobAsync(ListStatus);
    }
}
